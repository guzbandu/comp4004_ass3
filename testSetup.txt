Testing
-------

The test suite uses the Firefox Selenium web driver combined with the JUnit test framework. Using these two frameworks together assertions are made on the HTML/CSS content displayed by the web app.

A small "invisible" form was added to the bottom of the web application that allows the testing framework to inject "rigged" hands and exchange cards. This allows for testing of the various hand scenarios and hold versus exchange strategies that the AI is programmed with.

Although there is only a small number of JUnit test methods, the coverage is quite high since the injection method allows all hand combinations to be tested, both exchange strategies and the ranking to be covered.

Partial injection was used, where an intial hand was setup but the actual exchange was not overridden, to test the  actual exchange logic within the strategy code. All possible combinations of exchange scenarios were covered.

Each of the possible hand ranks were tested against in groups of four to ensure the ranking logic was correct. This was covered during the Player testing scenarios.

The code for hand ranking was written before the clarifications regarding how ranking should be done. As a result a slightly different ranking strategy is used by this application. First and foremost the application ranks by hand so straight flush versus straight versus flush. In the case where two players have the same hand rank the highest card rank is then considered. So a pair of A's would be beat a pair of 2's. A straight with an 8 high would beat a straight with a 5 high. When the highest ranking card is tied then the cards suit is considered and the highest suit will win. So the pair of A's with the spade A will beat the other pair of A's. I apologize that I did not have time to rewrite this logic once the desired functionality was clarified. The application does at least apply a consistent hand ranking strategy that is reproducible and testable.



Running the tests
-----------------

Using Eclipse
1. Start the poker web application as described above
2. Open the Eclipse IDE
3. Import the project using: File > Import > General > Existing Project
4. Under src/test/java/selenium right click SeleniumTestSuite select Run As > Junit Test

Using the JAR
1. Start the poker web application as described above
2. From the command line of your choice go the Franklin-A3 directory
3. Run "java -jar Poker.jar"
4. The results will be displayed to the console as well as placed in the file PokerTests.txt
